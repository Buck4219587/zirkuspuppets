PUPPET Zirkusclown
  CHARSET: "UTF-8"
  LOGIN: " kommt zur Arbeit."
  LOGOUT: " hat Feierabend."
  APPEAR: " kommt um aufzuräumen."
  DISAPPEAR: " hat aufgeräumt."
  INFO: "Ich halte die Zirkusräumlichkeiten sauber."
  OVERFLOW: HARAKIRI
  NEWOWNER: NO
  CITYCHAT: YES
  CASESENSITIV: YES
#  SAVE: "save*"
  OWN: NO

@list: listebefehle
@start: rundgang

ACTION start
  SET HOME C177
  SET GAMELIST "11nimmt 6nimmt 7Wonders Abluxxen AllesImEimer Atlantis Attika Attribut AufAchse Backgammon Bazaar Blockers Bluff Bohnanza BohnDuell Bruegge CafeInternational CantStop Carcassonne Cartagena CastlesOfTuscany Caylus CC-JaegerUndSammler Clans CleverHochDrei Crosswise Diamant DieCrew Dizzle Dog Doppelkopf DoppeltSoClever Drachenherz Dudeln Dvonn Emerald Evolution FinstereFlure Fuersten Funkenschlag GanzSchoenClever Geister Go GoennenKoennen Grimoria Hadara Halali HalfPintHeroes Helvetia HeulDoch Imhotep Imperial ImSchutzeDerBurg Intrige Kardinal&Koenig KingdomBuilder KingLui Kingsburg Kribbeln Ligretto Manhattan Manitou MarcoPolo Medina Meuterer MonsterExpedition NochMal NotreDame Numeri OhneFurchtUndAdel PackeisAmPol Pantheon ParisParis PiranhaPedro PuertoRico Saboteur SaeulenDerErde SanJuan SanktPetersburg SantaCruz Siedler SkullKing SpaceBob Sticheln StoneAge StreetSoccer ThurnUndTaxis Tichu Tongiaki Transamerica TurnIt UmKroneUndKragen Vabanque Venedig Verflixxt Verraeter Wikinger Wizard Yinsh Zatre"
  WHEN ERROR DO error
  WHEN TIMER 3600 DO rundgang
END

ACTION listebefehle
  -- @start Starte den Aufräumvorgang
END

# counter: Zähler für die While-Schleife
# players: Summiert die Anzahl der gefundenen Spieler in den Räumen
# resets: Anzahl der Räume, in denen ein Reset durchgeführt wurde
ACTION rundgang
  SET counter 0
  SET players 0
  SET resets 0
  
  SET PUBLIC1 "<html><head><meta charset="utf-8"/><style>h1{font-family:arial,sans-serif;font-size:20px;font-weight:bold;text-align:center}table.zirkusTable{border:2px solid #a40808;background-color:#fff;width:100%;text-align:left;border-collapse:collapse}table.zirkusTable td,table.zirkusTable th{border:1px solid #aaa;padding:4px 1px}table.zirkusTable tbody td{font-size:13px}table.zirkusTable tr:nth-child(even){background:#f5c8bf}table.zirkusTable thead{background:#a40808}table.zirkusTable thead th{font-size:16px;font-weight:700;color:#fff;text-align:center;border-left:2px solid #a40808}table.zirkusTable thead th:first-child{border-left:none}</style></head><body><h1>Raumliste Zirkus</h1><table class="zirkusTable"><tr><th>Raum</th><th>Name</th><th>Spiel</th><th>Besitzer</th></tr>"
  SET publiccnt 2
  SET PUBLIC[publiccnt] ""
  
  -- Fange an aufzuräumen
  
  WHILE [counter] <= 180
    BEGIN
      SET zielraum "C177-[counter]"
      >> /room [zielraum]              # Wechsel in den nächsten Raum
      GETROOMINFO
      IF [ROOM] == [zielraum]
        BEGIN
          DO roominfotopublic
          # -- Ich bin jetzt in Raum [ROOM] mit Spiel [GAME]
          IF LISTLENGTH [GAME] > 1
            BEGIN
              DO subraeume
            END
          ELSE
            BEGIN
              SET spiel [GAME]
              DO raumreset
            END
        END
      ELSE # Raum existiert nicht
        BEGIN
          # -- [zielraum] existiert nicht
        END

      EVAL counter = [counter] + 1
      SLEEP 3
    END  # END WHILE
  
  >> /room [HOME]
  >> /ctell Im Zirkus spielen aktuell [players] Personen. [resets] Räume zurückgesetzt.
  -- Im Zirkus spielen aktuell [players] Personen. [resets] Räume zurückgesetzt.
  
  EVAL publiccnt = [publiccnt] + 1
  SET PUBLIC[publiccnt] "</table></body></html>"
  
  WHILE [publiccnt] <= 25
    BEGIN
      EVAL publiccnt = [publiccnt] + 1
      UNSET PUBLIC[publiccnt]
    END

  SAVEPUBLIC

END

# Iteriert durch die Subräume eines Gebäudes mit mehreren Spielen
# GAME, GAMELIST, players, reset müssen gesetzt sein
ACTION subraeume
  SET sumraum 1
  FOR spiel IN [GAME]
    BEGIN
      # -- Spiel [spiel] in Raum [zielraum]-[sumraum]
      >> /room [zielraum]-[sumraum]
      DO raumreset
      EVAL sumraum = [sumraum] + 1
    END
END

# Für Spielräume: setzt zurück oder zählt Anzahl spieler
# IN GAMELIST: Liste der Spiele
# IN spiel: Spiel im aktuellen Raum
# IN players: Counter für die Anzahl der Spieler 
# IN resets: Counter für die Anzahl der zurückgesetzten Räume 
ACTION raumreset
  IF [spiel] INLIST [GAMELIST]
    BEGIN
      DO spielerzahl
      IF [x] > 0
        BEGIN
          # -- Hier sind die folgenden Personen [WHO]
          EVAL players = [players] + [x]
        END
      ELSE
        BEGIN
          # -- Hier ist niemand... führe reset durch.
          >> /reset
          EVAL resets = [resets] + 1
        END
      END
  ELSE # Spiel nicht in Liste
    BEGIN
      # -- [spiel] ist nicht in der Liste der Spiele.
    END
END

ACTION spielerzahl
  GETWHO                               # liefert in [WHO] eine Liste mit
                                       # den Namen der Anwesenden
  SET x 0                              # die Anzahl x wird zu Beginn auf 0 gesetzt.
  FOR anwesender IN [WHO]              # Alle Namen aus der Liste
                                       #   werden abgearbeitet.
    BEGIN
      GETINFO [anwesender]             # Die Infos zum Namen werden gelesen.
      IF NOT [PUPPET]                  # Puppets werden nicht gezählt.
        EVAL x = [x] + 1               # Für jeden Spieler wird x erhöht.
    END
END

# GETROOMINFO muss zuvor aufgerufen werden
# publiccnt muss gesetzt sein
ACTION roominfotopublic
  LOCAL currentroomtext = "<tr><td>[ROOM]</td><td>[NAME]</td><td>[GAME]</td><td>[OWNER]</td></tr>"
  EVAL publength = LENGTH [PUBLIC[publiccnt]]
  EVAL currentroomlength = LENGTH [currentroomtext]
  EVAL totallength = [publength] + [currentroomlength]
  
  IF [totallength] > 4500
    BEGIN
      EVAL publiccnt = [publiccnt] + 1
      SET PUBLIC[publiccnt] ""
    END

  SET PUBLIC[publiccnt] "[PUBLIC[publiccnt]] [currentroomtext]"
END

ACTION error
  >> Ein Fehler ist aufgetreten ([MESSAGE])
END

PUPPETEND
